length(fadnames)
NO <- rep(1,times=length(fad1useful[,1])) #new mark variable, distinguishes different original datasets
age <- fad1useful[,2]
fad1final <- cbind(NO,age,gender,edu,fad1useful[,fadnames]+1,fad1useful[,33:92]) #recode FAD_1 from 0-4 to 1-5
head(fad1final)
fad3all <- read.csv("FAD_4_MLOC.csv")
rm(list = ls())
library("car")
rm(list = ls())
library("car")
library("dplyr")
fad1all <- read.csv("FAD_1_CSV.csv",encoding="UTF-8") #where resave FAD_1 as csv with UTF-8
head(fad1all[,1:10])
usefulnames1 <- c("id", "age","gender_gene","gender_self_report","education_level",
"FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26",
"BIG5_A1","BIG5_A2","BIG5_A3","BIG5_A4","BIG5_A5","BIG5_A6","BIG5_A7","BIG5_A8","BIG5_A9","BIG5_A10","BIG5_A11","BIG5_A12",
"BIG5_N1","BIG5_N2","BIG5_N3","BIG5_N4","BIG5_N5","BIG5_N6","BIG5_N7","BIG5_N8","BIG5_N9","BIG5_N10","BIG5_N11","BIG5_N12",
"BIG5_C1","BIG5_C2","BIG5_C3","BIG5_C4","BIG5_C5","BIG5_C6","BIG5_C7","BIG5_C8","BIG5_C9","BIG5_C10","BIG5_C11","BIG5_C12",
"BIG5_E1","BIG5_E2","BIG5_E3","BIG5_E4","BIG5_E5","BIG5_E6","BIG5_E7","BIG5_E8", "BIG5_E9","BIG5_E10","BIG5_E11","BIG5_E12",
"BIG5_O1","BIG5_O2","BIG5_O3", "BIG5_O4","BIG5_O5","BIG5_O6","BIG5_O7","BIG5_O8","BIG5_O9","BIG5_O10","BIG5_O11","BIG5_O12")
fad1useful <- fad1all[,usefulnames1]
table(fad1useful$education_level)
educationlvl <- as.vector(fad1useful$education_level)
edu <- car::recode(educationlvl,"'小学及以下'=1;
'初中'=2;
'中专或职高'=3;
'高中'=3;
'大专'=4;
'本科'=5;
'硕士'=6;
'博士'=7;else=0")
table(edu) #recode education level with FAD_2´s standard
table(fad1useful$gender_gene)
table(fad1useful$gender_self_report)
genderfad1 <- function(a){
gen <- a[3:4]
genders <- car::recode(gen,"'female'=2;'Female'=2;'male'=1;'Male'=1;else =0") #NA-0
if (genders[1]==0 & genders[2] >=1) gender <- genders[2]
else gender <- genders[1]
return(gender)
}
gender <- apply(fad1useful, 1, genderfad1) #recode variable geneder, use the biological gender
table(gender)
fadnames <- c("FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26")
length(fadnames)
NO <- rep(1,times=length(fad1useful[,1])) #new mark variable, distinguishes different original datasets
age <- fad1useful[,2]
fad1final <- cbind(NO,age,gender,edu,fad1useful[,fadnames]+1,fad1useful[,33:92]) #recode FAD_1 from 0-4 to 1-5
head(fad1final)
write.csv(fad1final,"NEW_FAD_1.csv",row.names=FALSE,fileEncoding ="UTF-8")
fad2all <- read.csv("FAD_2.csv")
head(fad2all)
View(fad2all)
View(fad2all)
table(fad2all$native)
table(fad2all$age) #1 subject's age = 19.5
table(fad2all$check)
usefulnames2 <- c("age","gender","edu",
"FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26",
"IPC1","IPC2","IPC3","IPC4","IPC5","IPC6","IPC7","IPC8","IPC9","IPC10","IPC11","IPC12","IPC13","IPC14","IPC15","IPC16","IPC17","IPC18","IPC19","IPC20","IPC21","IPC22","IPC23","IPC24",
"BFI_A1","BFI_A2","BFI_A3","BFI_A4","BFI_A5","BFI_A6","BFI_A7","BFI_A8","BFI_A9",
"BFI_C1","BFI_C2","BFI_C3","BFI_C4","BFI_C5","BFI_C6","BFI_C7","BFI_C8","BFI_C9",
"BFI_N1","BFI_N2","BFI_N3","BFI_N4","BFI_N5","BFI_N6","BFI_N7","BFI_N8",
"BFI_O1","BFI_O2","BFI_O3","BFI_O4","BFI_O5","BFI_O6","BFI_O7","BFI_O8","BFI_O9","BFI_O10",
"BFI_E1","BFI_E2","BFI_E3","BFI_E4","BFI_E5","BFI_E6","BFI_E7","BFI_E8")
fad2useful <- fad2all[,usefulnames2] #useful names in collected dataset, FAD+, IPC & BIG FIVE INVENTORY with 5 dimensions x 8 items
NO <- rep(2,times=length(fad2useful[,1]))
fad2final <- cbind(NO,fad2useful)
head(fad2final)
write.csv(fad2final,"NEW_FAD_2.csv",row.names=FALSE,fileEncoding ="UTF-8")
fad12 <- dplyr::bind_rows(fad1final,fad2final)
head(fad12)
table(fad12$NO)
fad3all <- read.csv("FAD_3.csv")
head(fad3all)
NO <- rep(3,times=length(fad3all[,1]))
fad3final <- cbind(NO,fad3all)
head(fad3final)
fad123 <- dplyr::bind_rows(fad12,fad3final)
head(fad123)
table(fad123$NO)
fad4all <- read.csv("FAD_4_MLOC.csv")
usefulnames4 <- c("age","gender","edu",
"FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26",
"BFI_A1","BFI_A2","BFI_A3","BFI_A4","BFI_A5","BFI_A6","BFI_A7","BFI_A8","BFI_A9",
"BFI_C1","BFI_C2","BFI_C3","BFI_C4","BFI_C5","BFI_C6","BFI_C7","BFI_C8","BFI_C9",
"BFI_N1","BFI_N2","BFI_N3","BFI_N4","BFI_N5","BFI_N6","BFI_N7","BFI_N8",
"BFI_O1","BFI_O2","BFI_O3","BFI_O4","BFI_O5","BFI_O6","BFI_O7","BFI_O8","BFI_O9","BFI_O10",
"BFI_E1","BFI_E2","BFI_E3","BFI_E4","BFI_E5","BFI_E6","BFI_E7","BFI_E8",
"MLOC1","MLOC4","MLOC5","MLOC9","MLOC18","MLOC19","MLOC21","MLOC23",
"MLOC3","MLOC8","MLOC11","MLOC13","MLOC15","MLOC17","MLOC20","MLOC22",
"MLOC2","MLOC6","MLOC7","MLOC10","MLOC12","MLOC14","MLOC16","MLOC24")
fad4useful <- fad4all[,usefulnames4]
fad4useful
NO <- rep(4,times=length(fad4useful[,1]))
fad4final <- cbind(NO,fad4all)
write.csv(fad4final,"NEW_FAD_4.csv",row.names=FALSE,fileEncoding ="UTF-8")
fad1234 <- dplyr::bind_rows(fad123,fad4final)
head(fad1234)
fad123
fad4final <- cbind(NO,fad4all)
fad1234 <- dplyr::bind_rows(fad123,fad4final)
head(fad1234)
library("dplyr")
fad123
fad4final <- cbind(NO,fad4useful)
fad4final <- cbind(NO,fad4useful)
write.csv(fad4final,"NEW_FAD_4.csv",row.names=FALSE,fileEncoding ="UTF-8")
fad1234 <- dplyr::bind_rows(fad123,fad4final)
head(fad1234)
write.csv(fad1234,"fadchina.csv",row.names=FALSE,fileEncoding ="UTF-8")
fadAall <- read.csv("NEW_FAD_A.csv")
head(fadAall)
NO <- rep(4,times=length(fadAuseful[,1]))
NO <- rep(4,times=length(fadAall[,1]))
fadAfinal <- cbind(NO,fadAall)
head(fadAfinal)
NO <- rep(5,times=length(fadAall[,1]))
fadAfinal <- cbind(NO,fadAall)
head(fadAfinal)
fadFall <- read.csv("FAD_F.csv")
head(fadFall)
gender <- fadFall$Sexe
age <- fadFall$Age
NO <- rep(6,times=length(fadFall[,1]))
fadFfinal <- cbind(NO,gender,age,fadFall[,fadnames])
head(fadFfinal)
fadAF <- dplyr::bind_rows(fadAfinal,fadFfinal)
head(fadAF)
fadJall <- read.csv("FAD_J.csv")
head(fadJall)
NO <- rep(7,times=length(fadJall[,1]))
fadJfinal <- cbind(NO,fadJall[,fadnames])
head(fadJfinal)
fadAFJ <- dplyr::bind_rows(fadAF,fadJfinal)
head(fadAFJ)
table(fadAFJ$NO)
g <- c(rep(0,length(fad1234[,1])),rep(1,length(fadAFJ[,1]))) #other new mark variable for CHINESE DATASETS & FOREIGN DATASETS
fadALL <- dplyr::bind_rows(fad1234,fadAFJ)
fadALLfinal <- cbind(g,fadALL)
head(fadALLfinal)
table(fadALLfinal$g)
write.csv(fad1234,"fadchina.csv",row.names=FALSE,fileEncoding ="UTF-8")
write.csv(fadALLfinal,"fadallbynow.csv",row.names=FALSE,fileEncoding ="UTF-8")
rm(list = ls())
library("psych")
testdata <- read.csv("fadallbynow.csv")
head(testdata)
fadnames <- c("FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26")
faddata <- testdata[,fadnames]
head(faddata)
apply(faddata, 2, psych::describe)
anyNA(faddata)
length(which(is.na(faddata)))
cleaning01 <-function(v){
if (length(v!=27)) res <- 0
if (anyNA(v)==T) res <- 0
else {fretable <- table(v)
frenvm <- length(fretable)
if (frenvm<=1) res <- 0
else res <- 1}
return(res)
}
stayornot <- apply(faddata,1,cleaning01) # res==0 --> any NA| case with duplicated; res==1 --> case could stay
table(stayornot)
stayMARKEDall <- cbind(testdata,stayornot)
head(stayMARKEDall)
cleanall <- stayMARKEDall[which(stayornot==1),]
head(cleanall)
not <- stayMARKEDall[which(stayornot==0),] #recheck cases with duplicated or NA
head(not)
cleanfad <- cleanall[,fadnames]
length(cleanall[,1])
not
head(not)
head(cleanall)
stayornot <- apply(faddata,1,cleaning01) # res==0 --> any NA| case with duplicated; res==1 --> case could stay
table(stayornot)
stayMARKEDall <- cbind(testdata,stayornot)
cleanall <- stayMARKEDall[which(stayornot==1),]
head(cleanall)
not <- stayMARKEDall[which(stayornot==0),] #recheck cases with duplicated or NA
head(not)
cleanfad <- cleanall[,fadnames]
length(cleanall[,1])
length(which(is.na(faddata)))
head(faddata)
table(stayornot)
length(cleanall[,1])
FADScores <- function(v){
FDNames <- c("FD1","FD5","FD9","FD13", "FD17")
SDNames <- c("SD2","SD6","SD10","SD14","SD18","SD22","SD24")
UPNames <- c("UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27")
FWNames <- c("FW4","FW8","FW12","FW16","FW21","FW23","FW26")
FD <- sum(v[FDNames])/length(FDNames)
SD <- sum(v[SDNames])/length(SDNames)
UP <- sum(v[UPNames])/length(UPNames)
FW <- sum(v[FWNames])/length(FWNames)
Socres <- cbind(FD,SD,UP,FW)
return(Socres)
}
fadscores <- t(apply(cleanfad, 1, FADScores)) #calculate the 4 dimensions´ scores
colnames(fadscores) <- c("FD","SD","UP","FW")
head(fadscores)
cleanfadscores <- cbind(fadscores,cleanfad)
head(cleanfadscores)
CLEANfad <- cbind(cleanall[1:5],fadscores,cleanall[6:(length(cleanall)-1)])
head(CLEANfad)
write.csv(CLEANfad,"cleanfadall.csv",row.names=FALSE,fileEncoding ="UTF-8")
rm(list = ls())
library("CTT")
library("dplyr")
library("psych")
library("lavaan")
library("semPlot")
library("semTools")
datafadall <- read.csv("cleanfadall.csv")
head(datafadall)
datafadall <- read.csv("cleanfadall.csv")
datafadchina <- datafadall[which(datafadall$g==0),-1]
datafadforeign <- datafadall[which(datafadall$g==1),-1]
head(datafadchina)
head(datafadforeign)
desdatachina <- datafadchina[,1:4] #descriptions of chinese datasets
apply(desdatachina, 2, psych::describe)
apply(desdatachina, 2, table)
head(desdatachina)
desdataforeign <- datafadforeign[,1:4] #descriptions of foriegn datasets
apply(desdataforeign, 2, psych::describe)
apply(desdataforeign, 2, table)
head(desdataforeign)
View(desdataforeign)
desdataforeign
fadnames <- c("FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26")
fadchinasolo <- datafadchina[,fadnames]
apply(fadchinasolo,2,describe)
apply(fadchinasolo,2,table)
FDnames <- c("FD1","FD5","FD9","FD13","FD17")
SDnames <- c("SD2","SD6","SD10","SD14","SD18","SD22","SD24")
UPnames <- c("UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27")
FWnames <- c("FW4","FW8","FW12","FW16","FW21","FW23","FW26")
fadFDC <- datafadchina[,FDnames]
fadSDC <- datafadchina[,SDnames]
fadUPC <- datafadchina[,UPnames]
fadFWC <- datafadchina[,FWnames]
fadchinalist <- list(fadFDC,fadSDC,fadUPC,fadFWC)
fadchinalist
fadFDF <- datafadforeign[,FDnames]
fadSDF <- datafadforeign[,SDnames]
fadUPF <- datafadforeign[,UPnames]
fadFWF <- datafadforeign[,FWnames]
fadforeignlist <- list(fadFDF,fadSDF,fadUPF,fadFWF)
resctt <- CTT::reliability(fadchinasolo)
str(resctt) #alpha china ==0.759
psych::alpha(fadchinasolo) #FW12 may be reversed FW12:只要真心想做，人们可以克服一切困难
psych::omega(fadchinasolo)
reschinactt <- lapply(fadchinalist,CTT::reliability)
str(reschinactt)
resalphachina <- lapply(fadchinalist,psych::alpha)
resomegachina <- lapply(fadchinalist,psych::omega)
resalphachina
resomegachina <- lapply(fadchinalist,psych::omega)
iteminfoctt <- as.data.frame(cbind(resctt$itemMean,
apply(fadchinasolo, MARGIN = 2, FUN = sd),
resctt$pBis,resctt$alphaIfDeleted)) #pBis=item-total correlation
colnames(iteminfoctt) <- c("mean","sd","rpbc","alpha If Deleted")
round(iteminfoctt,3)
psych::alpha(fadchinasolo) #FW12 may be reversed FW12:只要真心想做，人们可以克服一切困难
check.keys=TRUE
psych::alpha(fadchinasolo) #FW12 may be reversed FW12:只要真心想做，人们可以克服一切困难
psych::alpha(fadchinasolo,check.keys=TRUE) #FW12 may be reversed FW12:只要真心想做，人们可以克服一切困难
iteminfoctt <- as.data.frame(cbind(resctt$itemMean,
apply(fadchinasolo, MARGIN = 2, FUN = sd),
resctt$pBis,resctt$alphaIfDeleted)) #pBis=item-total correlation
colnames(iteminfoctt) <- c("mean","sd","rpbc","alpha If Deleted")
round(iteminfoctt,3)
cor4 <- cor(datafadchina[,c("FD","SD","UP","FW")])
coritems <- cor(datafadchina[,fadnames])
which(abs(coritems)<1 & abs(coritems)>0.6)  #FD1-FD9 == 0.7356
corFD <- cor(datafadchina$FD,datafadchina[,fadnames]) #correlation between each dimension and each items
corSD <- cor(datafadchina$SD,datafadchina[,fadnames])
corUP <- cor(datafadchina$UP,datafadchina[,fadnames])
corFW <- cor(datafadchina$FW,datafadchina[,fadnames])
cor4withitems <- t(rbind(corFD,corSD,corUP,corFW))
colnames(cor4withitems) <- c("FD","SD","UP","FW") #correlation between 4 dimensions
round(cor4withitems,3)
fadforeignsolo <- datafadforeign[,fadnames]
apply(fadforeignsolo,2,describe)
apply(fadforeignsolo,2,table)
rescttf <- CTT::reliability(fadforeignsolo)
str(rescttf)#alpha==0.829
psych::alpha(fadforeignsolo)
psych::omega(fadforeignsolo)
resforeignctt <- lapply(fadforeignlist,CTT::reliability)
str(resforeignctt)
resalphaforeign <- lapply(fadforeignlist,psych::alpha)
resomegaforeign <- lapply(fadforeignlist,psych::omega)
iteminfocttf <- as.data.frame(cbind(rescttf$itemMean,
apply(fadforeignsolo, MARGIN = 2, FUN = sd),
rescttf$pBis,rescttf$alphaIfDeleted)) #pBis=item total correlation
resomegaforeign
resalphaforeign <- lapply(fadforeignlist,psych::alpha)
resalphaforeign
colnames(iteminfocttf) <- c("mean","sd","rpbc","alpha If Deleted")
round(iteminfocttf,3)
iteminfocttf[order(iteminfocttf$`alpha If Deleted`,decreasing = T),] #FW12 People can overcome any obstacles if they truly want to
cor4f <- cor(datafadforeign[,c("FD","SD","UP","FW")])
coritemsf <- cor(datafadforeign[,fadnames])
which(abs(coritemsf)<1 & abs(coritemsf)>0.6)  #FD1-FD9 == 0.6345
corFDf <- cor(datafadforeign$FD,datafadforeign[,fadnames])
corSDf <- cor(datafadforeign$SD,datafadforeign[,fadnames])
corUPf <- cor(datafadforeign$UP,datafadforeign[,fadnames])
corFWf <- cor(datafadforeign$FW,datafadforeign[,fadnames])
cor4withitemsf <- t(rbind(corFDf,corSDf,corUPf,corFWf))
colnames(cor4withitemsf) <- c("FD","SD","UP","FW")
round(cor4withitemsf,3)
model <- 'FD =~ FD1 + FD5 + FD9 + FD13 + FD17;
SD =~ SD2 + SD6 + SD10 + SD14 + SD18 + SD22 + SD24;
UP =~ UP3 + UP7 + UP11 + UP15 + UP19 + UP20 + UP25 + UP27;
FW =~ FW4 + FW8 + FW12 + FW16 + FW21 + FW23 + FW26'
rescfafitCHINA <- lavaan::cfa(model, fadchinasolo,estimator="ml") #"ULS","WLSM"
summary(rescfafitCHINA, standardized = T, fit.measures = TRUE)
semPlot::semPaths(rescfafitCHINA,"std",rotation = 2, layout = "tree2", nCharNodes = 0,
sizeLat = 15, sizeLat2 = 7, label.norm = "OOOOO",
mar=c(2,6,2,4), curvePivot = TRUE,
edge.label.cex=1.2, residuals = F)
semTools::moreFitIndices(rescfafitCHINA)
rescfafitFOREIGN <- lavaan::cfa(model, fadforeignsolo,estimator="ml") #"ULS","WLSM"
summary(rescfafitFOREIGN, standardized = T, fit.measures = TRUE)
semPlot::semPaths(rescfafitFOREIGN,"std",rotation = 2, layout = "tree2", nCharNodes = 0,
sizeLat = 15, sizeLat2 = 7, label.norm = "OOOOO",
mar=c(2,6,2,4), curvePivot = TRUE,
edge.label.cex=1.2, residuals = F)
semTools::moreFitIndices(rescfafitFOREIGN)
fadsolo <- datafadall[,fadnames]
head(fadsolo)
g <- datafadall$g
dataforinvariance <- cbind(g,fadsolo)
head(dataforinvariance)
table(g)
dataforinvariance$g <- factor(dataforinvariance[,1],levels=c("0","1"))
table(dataforinvariance$g)
config <- cfa(model, dataforinvariance, group="g")
weak <- cfa(model, dataforinvariance, group="g", group.equal="loadings") #factor weight
strong<- cfa(model, dataforinvariance, group="g", group.equal= c("loadings", "intercepts"))  #set the same weight and intercepts
strict<- cfa(model, dataforinvariance, group="g",
group.equal= c("loadings", "intercepts", "residuals"))   #residues
summary(config)
summary(weak)
summary(strong)
summary(strict)
anova(config, weak, strong, strict)
measurementInvariance(model=model, data=dataforinvariance, group="g",estimator="WLSM") #"ULS"
resefaCHINA <- psych::fa(fadchinasolo, nfactors = 4, rotate = "oblimin", fm = "ml")  #with 4 dimensions
resefaCHINA$loading
fa.diagram(resefaCHINA)
resefaFOREIGN <- psych::fa(fadforeignsolo, nfactors = 4, rotate = "oblimin", fm = "ml")
resefaFOREIGN$loading
fa.diagram(resefaFOREIGN)
rescpa <- psych::fa.parallel(fadsolo,fm = "uls")
rescpaCHINA <- psych::fa.parallel(fadchinasolo,fm = "uls")
resPA2CHINA<- as.data.frame(cbind(rescpaCHINA$pc.values,rescpaCHINA$pc.sim))
colnames(resPA2CHINA) <- c("PC values","PC simulated")
round(resPA2CHINA,3)
rescpaFOREIGN <- psych::fa.parallel(fadforeignsolo,fm = "uls")
resPA2FOREIGN<- as.data.frame(cbind(rescpaFOREIGN$pc.values,rescpaFOREIGN$pc.sim))
colnames(resPA2FOREIGN) <- c("PC values","PC simulated")
round(resPA2FOREIGN,3)
BFI_NAlocated <- which(is.na(datafadall[,"BFI_A1"]))
forBFI_FAD <- datafadall[-BFI_NAlocated,]
length(forBFI_FAD[,1])
FAD_BFI <- forBFI_FAD[,c("FD","SD","UP","FW",fadnames)]
length(FAD_BFI[,1])
BFIS <- function(datos,nombre,key){
databfi <- datos[,nombre]
data_corrected <- matrix(t(apply(databfi,1,function(x){x*key})),ncol = length(key))
datafinal <- na.exclude(data_corrected)
bfiscores <- apply(datafinal, 1, function(x){sum(x)/length(key)})
return(bfiscores)
} #function for BIG5 5 dimensions' Scores
BFI_ANames <- c("BFI_A1","BFI_A2","BFI_A3","BFI_A4","BFI_A5","BFI_A6","BFI_A7","BFI_A8","BFI_A9")
BFI_AKeys <- c(1,1,1,1,1,-1,-1,-1,-1)
BFIA <- BFIS(datafadall,BFI_ANames,BFI_AKeys)
length(BFIA)
BFI_CNames <- c("BFI_C1","BFI_C2","BFI_C3","BFI_C4","BFI_C5","BFI_C6","BFI_C7","BFI_C8","BFI_C9")
BFI_CKeys <- c(1,1,1,1,1,-1,-1,-1,-1)
BFIC <- BFIS(datafadall,BFI_CNames,BFI_CKeys)
length(BFIC)
BFI_NNames <- c("BFI_N1","BFI_N2","BFI_N3","BFI_N4","BFI_N5","BFI_N6","BFI_N7","BFI_N8")
BFI_NKeys <- c(1,1,1,1,1,-1,-1,-1)
BFIN <- BFIS(datafadall,BFI_NNames,BFI_NKeys)
length(BFIN)
BFI_ONames <- c("BFI_O1","BFI_O2","BFI_O3","BFI_O4","BFI_O5","BFI_O6","BFI_O7","BFI_O8","BFI_O9","BFI_O10")
BFI_OKeys <- c(1,1,1,1,1,1,1,1,1,1)
BFIO <- BFIS(datafadall,BFI_ONames,BFI_OKeys)
length(BFIO)
BFI_ENames <- c("BFI_E1","BFI_E2","BFI_E3","BFI_E4","BFI_E5","BFI_E6","BFI_E7","BFI_E8")
BFI_EKeys <- c(1,1,1,1,1,1,1,1)
BFIE <- BFIS(datafadall,BFI_ENames,BFI_EKeys)
length(BFIE)
BFIS <- cbind(BFIA,BFIC,BFIN,BFIO,BFIE)
BFI_FAD_Final <- cbind(BFIS,FAD_BFI)
corBFI_FAD <- cor(BFI_FAD_Final[,1:9])
corBFI_FAD[which(abs(corBFI_FAD)<1 & abs(corBFI_FAD)>0.6)]
corBFI_FAD27 <- cor(BFI_FAD_Final[,-c(6,7,8,9)])
corBFI_FAD27[which(abs(corBFI_FAD27)<1 & abs(corBFI_FAD27)>0.6)] #FAD1-9
BFI_FAD_Final
BFI_FAD_Final[,1:9]
corBFI_FAD[which(abs(corBFI_FAD)<1 & abs(corBFI_FAD)>0.6)]
corBFI_FAD27 <- cor(BFI_FAD_Final[,-c(6,7,8,9)])
corBFI_FAD27[which(abs(corBFI_FAD27)<1 & abs(corBFI_FAD27)>0.6)] #FAD1-9
MLOC_NAlocated <- which(is.na(datafadall[,"MLOC1"]))
forMLOC_FAD <- datafadall[-MLOC_NAlocated,]
length(forMLOC_FAD[,1])
forMLOC_FAD
length(fad4useful[,1])
fad4all <- read.csv("FAD_4_MLOC.csv")
head(fad4all)
usefulnames4 <- c("age","gender","edu",
"FD1","FD5","FD9","FD13","FD17",
"SD2","SD6","SD10","SD14","SD18","SD22","SD24",
"UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
"FW4","FW8","FW12","FW16","FW21","FW23","FW26",
"BFI_A1","BFI_A2","BFI_A3","BFI_A4","BFI_A5","BFI_A6","BFI_A7","BFI_A8","BFI_A9",
"BFI_C1","BFI_C2","BFI_C3","BFI_C4","BFI_C5","BFI_C6","BFI_C7","BFI_C8","BFI_C9",
"BFI_N1","BFI_N2","BFI_N3","BFI_N4","BFI_N5","BFI_N6","BFI_N7","BFI_N8",
"BFI_O1","BFI_O2","BFI_O3","BFI_O4","BFI_O5","BFI_O6","BFI_O7","BFI_O8","BFI_O9","BFI_O10",
"BFI_E1","BFI_E2","BFI_E3","BFI_E4","BFI_E5","BFI_E6","BFI_E7","BFI_E8",
"MLOC1","MLOC4","MLOC5","MLOC9","MLOC18","MLOC19","MLOC21","MLOC23",
"MLOC3","MLOC8","MLOC11","MLOC13","MLOC15","MLOC17","MLOC20","MLOC22",
"MLOC2","MLOC6","MLOC7","MLOC10","MLOC12","MLOC14","MLOC16","MLOC24")
fad4useful <- fad4all[,usefulnames4]
NO <- rep(4,times=length(fad4useful[,1]))
fad4final <- cbind(NO,fad4useful)
length(fad4useful[,1])
FAD_MLOC <- forMLOC_FAD[,c("FD","SD","UP","FW",fadnames)]
FAD_MLOC
length(FAD_MLOC[,1])
length(forMLOC_FAD[,1])
MLOC_INames <- c("MLOC1","MLOC4","MLOC5","MLOC9","MLOC18","MLOC19","MLOC21","MLOC23")
MLOC_IKeys <-  c(1,1,1,1,1,1,1,1)
MLOC_IAlpha <-  psych::alpha(df2.1[,MLOC_INames], keys=MLOC_IKeys)  # calculate the alpha coefficient of Internal
MLOC_IAlpha <-  psych::alpha(forMLOC_FAD[,MLOC_INames], keys=MLOC_IKeys)  # calculate the alpha coefficient of Internal
MLOC_IAlpha
print(MLOC_IAlpha$total)  # print the alpha for Internal
MLOC_IOmega <- psych::omega(forMLOC_FAD[,MLOC_INames])
print(c(MLOC_IOmega$omega_h,MLOC_IOmega$omega.tot))
MLOC_PNames <- c("MLOC3","MLOC8","MLOC11","MLOC13","MLOC15","MLOC17","MLOC20","MLOC22")
MLOC_PKeys <-  c(1,1,1,1,1,1,1,1)
MLOC_PAlpha <-  psych::alpha(forMLOC_FAD[,MLOC_PNames], keys=MLOC_PKeys)     # calculate the alpha coefficient of Powerful others
print(MLOC_PAlpha$total)  # print the alpha for Powerful others
MLOC_POmega <- psych::omega(forMLOC_FAD[,MLOC_PNames])
print(c(MLOC_POmega$omega_h,MLOC_POmega$omega.tot))
MLOC_CNames <- c("MLOC2","MLOC6","MLOC7","MLOC10","MLOC12","MLOC14","MLOC16","MLOC24")
MLOC_CKeys <-  c(1,1,1,1,1,1,1,1)
MLOC_CAlpha <-  psych::alpha(forMLOC_FAD[,MLOC_CNames], keys=MLOC_CKeys)     # calculate the alpha coefficient of Chance
print(MLOC_CAlpha$total)  # print the alpha for Chance
MLOC_COmega <- psych::omega(forMLOC_FAD[,MLOC_CNames])
print(c(MLOC_COmega$omega_h,MLOC_COmega$omega.tot))
forMLOC_FAD
FAD_MLOC <- forMLOC_FAD[,c("FD","SD","UP","FW",fadnames)]
FAD_MLOC
forMLOC_FAD
MLOC_I <- forMLOC_FAD[,MLOC_INames]
MLOC_I
MLOC_I <- forMLOC_FAD[,MLOC_INames]+3
MLOC_I
MLOC_PNames <- c("MLOC3","MLOC8","MLOC11","MLOC13","MLOC15","MLOC17","MLOC20","MLOC22")
MLOC_P <- forMLOC_FAD[,MLOP_INames]+3
MLOC_P <- forMLOC_FAD[,MLOC_PNames]+3
MLOC_CNames <- c("MLOC2","MLOC6","MLOC7","MLOC10","MLOC12","MLOC14","MLOC16","MLOC24")
MLOC_C <- forMLOC_FAD[,MLOC_CNames]+3
MLOC_C <- apply(forMLOC_FAD[,MLOC_CNames]+3,1,sum)
MLOC_C
MLOC_C <- cbind(forMLOC_FAD[,MLOC_CNames],apply(forMLOC_FAD[,MLOC_CNames]+3,1,sum) )
MLOC_C
BFIS
MLOC_I <- apply(forMLOC_FAD[,MLOC_INames]+3,1,sum)
MLOC_P <- apply(forMLOC_FAD[,MLOC_PNames]+3,1,sum)
MLOC_C <- apply(forMLOC_FAD[,MLOC_CNames]+3,1,sum)
MLOCS <- cbind(MLOC_I,MLOC_P,MLOC_C)
MLOCS
MLOC_FAD_Final <- cbind(MLOCS,FAD_MLOC)
MLOC_FAD_Final
corMLOC_FAD <- cor(MLOC_FAD_Final[,1:7])
corMLOC_FAD[which(abs(corMLOC_FAD)<1 & abs(corMLOC_FAD)>0.6)]
corMLOC_FAD
BFI_FAD_Final
MLOC_FAD_Final
corMLOC_FAD27 <- cor(MLOC_FAD_Final[,-c(4,5,6,7)])
corMLOC_FAD27[which(abs(corMLOC_FAD27)<1 & abs(corMLOC_FAD27)>0.6)]
corMLOC_FAD27
corBFI_FAD27[which(abs(corBFI_FAD27)<1 & abs(corBFI_FAD27)>0.6)] #FAD1-9
corMLOC_FAD27[which(abs(corMLOC_FAD27)<1 & abs(corMLOC_FAD27)>0.6)]
